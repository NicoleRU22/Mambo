generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BlogPost {
  id        Int      @id @default(autoincrement())
  title     String
  excerpt   String
  content   String
  date      DateTime
  category  String
  image     String
  status    String   @default("PUBLISHED")
  createdAt DateTime @default(now())
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  size      String?
  createdAt DateTime @default(now())
  updatedAt DateTime
  userId    Int
  productId Int
  colors    String?
  Product   Product  @relation(fields: [productId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  products    Product[] 
}

model ContactMessage {
  id          Int       @id @default(autoincrement())
  name        String
  email       String
  subject     String?
  message     String
  response    String?
  respondedAt DateTime?
  createdAt   DateTime  @default(now())
}

model NewsletterSubscriber {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String   @unique
  createdAt DateTime @default(now())
}

model Order {
  id              Int           @id @default(autoincrement())
  orderNumber     String        @unique
  status          OrderStatus   @default(PENDING)
  totalAmount     Float
  shippingAddress String
  shippingCity    String
  shippingState   String
  shippingZipCode String
  shippingPhone   String
  paymentMethod   PaymentMethod
  paymentStatus   PaymentStatus @default(PENDING)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  userId          Int?
  paymentIntentId String?
  User            User?         @relation(fields: [userId], references: [id])
  OrderItem       OrderItem[]
}

model OrderItem {
  id           Int      @id @default(autoincrement())
  productName  String
  productPrice Float
  quantity     Int
  size         String?
  createdAt    DateTime @default(now())
  orderId      Int
  productId    Int?
  Order        Order    @relation(fields: [orderId], references: [id])
  Product      Product? @relation(fields: [productId], references: [id])
}

model Product {
  id            Int         @id @default(autoincrement())
  name          String      @unique
  description   String?
  price         Float
  originalPrice Float?
  stock         Int         @default(0)
  petType       PetType
  images        String[]
  sizes         String[]
  rating        Float       @default(0)
  reviewsCount  Int         @default(0)
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  categoryId    Int?
  colors        String[]
  CartItem      CartItem[]
  OrderItem     OrderItem[]
  Category      Category?   @relation(fields: [categoryId], references: [id])
  Review        Review[]
  Wishlist      Wishlist[]
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  userId    Int
  productId Int
  Product   Product  @relation(fields: [productId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  role      Role       @default(USER)
  phone     String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  createdAt DateTime   @default(now())
  updatedAt DateTime
  CartItem  CartItem[]
  Order     Order[]
  Review    Review[]
  Wishlist  Wishlist[]
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  productId Int
  Product   Product  @relation(fields: [productId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Offer {
  id        Int      @id @default(autoincrement())
  title     String
  discount  Float
  image     String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
}

enum PaymentMethod {
  CARD
  PAYPAL
  CASH
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum PetType {
  DOG
  CAT
  BIRD
  FISH
  OTHER
}

enum Role {
  USER
  ADMIN
}
