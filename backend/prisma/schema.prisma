// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  phone     String? 
  address   String?
  city      String?
  state     String?
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]
  reviews   Review[]
  cartItems CartItem[]
  wishlist  Wishlist[]
}

enum Role {
  USER
  ADMIN
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  image       String?
  createdAt   DateTime  @default(now())

  products    Product[]
}

model Product {
  id            Int        @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  originalPrice Float?
  stock         Int        @default(0)
  petType       PetType
  images        String[]   // Array of image URLs
  sizes         String[]   // Array of sizes (XS, S, M, L, XL)
  rating        Float      @default(0)
  reviewsCount  Int        @default(0)
  isActive      Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  categoryId    Int?
  category      Category?  @relation(fields: [categoryId], references: [id])
  reviews       Review[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  wishlist      Wishlist[]
}

enum PetType {
  DOG
  CAT
  BIRD
  FISH
  OTHER
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  size      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id              Int         @id @default(autoincrement())
  orderNumber     String      @unique
  status          OrderStatus @default(PENDING)
  totalAmount     Float
  shippingAddress String
  shippingCity    String
  shippingState   String
  shippingZipCode String
  shippingPhone   String
  paymentMethod   PaymentMethod
  paymentStatus   PaymentStatus @default(PENDING)
  notes           String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  userId          Int?
  user            User?        @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CARD
  PAYPAL
  CASH
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  productName String
  productPrice Float
  quantity    Int
  size        String?
  createdAt   DateTime @default(now())

  orderId     Int
  order       Order    @relation(fields: [orderId], references: [id])
  productId   Int?
  product     Product? @relation(fields: [productId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}